**************************************************** Tuples in Python *****************************************************************

# Create your first tuple
tuple1 = ("disco",10,1.2 )
tuple2 =("packet",1,1.1)
print(tuple2[0])

# Print the type of the tuple you created
type(tuple1)

# Print the variable on each index
print(tuple1[0])
print(tuple1[1])
print(tuple1[2])

# Print the type of value on each index
print(type(tuple1[0]))
print(type(tuple1[1]))
print(type(tuple1[2]))

# Use negative index to get the value of the last element
tuple1[-1]

# Use negative index to get the value of the second last element
tuple1[-2]

# Use negative index to get the value of the third last element
tuple1[-3]

# Concatenate two tuples
tuple2 = tuple1 + ("hard rock", 10)
print(tuple2)

# Slice from index 0 to index 2
tuple2[0:3]


# Slice from index 3 to index 4
tuple2[3:5]

# Get the length of tuple
len(tuple2)

# A sample tuple
Ratings = (0, 9, 6, 5, 10, 8, 9, 6, 2)
print(Ratings)

# Sort the tuple
RatingsSorted = sorted(Ratings)
print(RatingsSorted)

# Create a nest tuple
NestedT =(1, 2, ("pop", "rock") ,(3,4),("disco",(1,2)))

# Print element on each index
print("Element 0 of Tuple: ", NestedT[0])
print("Element 1 of Tuple: ", NestedT[1])
print("Element 2 of Tuple: ", NestedT[2])
print("Element 3 of Tuple: ", NestedT[3])
print("Element 4 of Tuple: ", NestedT[4])

 # Print element on each index, including nest indexes
print("Element 2, 0 of Tuple: ", NestedT[2][0])
print("Element 2, 1 of Tuple: ", NestedT[2][1])
print("Element 3, 0 of Tuple: ", NestedT[3][0])
print("Element 3, 1 of Tuple: ", NestedT[3][1])
print("Element 4, 0 of Tuple: ", NestedT[4][0])
print("Element 4, 1 of Tuple: ", NestedT[4][1])


# Print the first element in the second nested tuples
NestedT[2][1][0]

# Print the second element in the second nested tuples
NestedT[2][1][1]

# Print the first element in the second nested tuples
NestedT[4][1][0]

# Print the second element in the second nested tuples
NestedT[4][1][1]

# sample tuple
genres_tuple = ("pop", "rock", "soul", "hard rock", "soft rock", \
"R&B", "progressive rock", "disco")
len(genres_tuple)

# Write your code below and press Shift+Enter to Find the length of the tuple, genres_tuple:
len(genres_tuple)

****************************************************** Lists ***************************************************************************

# Create a list
L = ["Michael Jackson", 10.1, 1982]
L

# Print the elements on each index
print('the same element using negative and positive indexing:\n Postive:',L[0],
'\n Negative:' , L[-3] )
print('the same element using negative and positive indexing:\n Postive:',L[1],
'\n Negative:' , L[-2] )
print('the same element using negative and positive indexing:\n Postive:',L[2],
'\n Negative:' , L[-1] )

# Sample List
["Michael Jackson", 10.1, 1982, [1, 2], ("A", 1)]

# Sample List
L = ["Michael Jackson", 10.1,1982,"MJ",1]
L

# List slicing
L[3:5]

# Use extend to add elements to list
L = [ "Michael Jackson", 10.2]
L.extend(['pop', 10])
L

# Use append to add elements to list
L = [ "Michael Jackson", 10.2]
L.append(['pop', 10])
L

# Use extend to add elements to list
L = [ "Michael Jackson", 10.2]
L.extend(['pop', 10])
L

# Use append to add elements to list
L.append(['a','b'])
L

# Change the element based on the index
A = ["disco", 10, 1.2]
print('Before change:', A)
A[0] = 'hard rock'
print('After change:', A)

: # Delete the element based on the index
print('Before change:', A)
del(A[0])
print('After change:', A)

# Split the string, default is by space
'hard rock'.split()

# Split the string by comma
'A,B,C,D'.split(',')

# Copy (copy by reference) the list A
A = ["hard rock", 10, 1.2]
B = A
print('A:', A)
print('B:', B)

# Examine the copy by reference
print('B[0]:', B[0])
A[0] = "banana"
print('B[0]:', B[0])

# Clone (clone by value) the list A
B = A[:]
B

print('B[0]:', B[0])
A[0] = "hard rock"
print('B[0]:', B[0])

# Create a list a_list, with the following elements 1, hello, [1,2,3] and True.
a_list = [1,'hello',[1,2,3],True]
a_list

# Find the value stored at index 1 of a_list. Write your code below and press Shift+Enter to execute
a_list[1]

************************************************* Sets in Python ***********************************************************************

# Create a set
set1 = {"pop", "rock", "soul", "hard rock", "rock", "R&B", "rock", "disco"}
set1

# Convert list to set
album_list = [ "Michael Jackson", "Thriller", 1982, "00:42:19", \
"Pop, Rock, R&B", 46.0, 65, "30-Nov-82", None, 10.0]
album_set = set(album_list)
album_set

# Convert list to set
music_genres = set(["pop", "pop", "rock", "folk rock", "hard rock", "soul", \
"progressive rock", "soft rock", "R&B", "disco"])
music_genres

# Sample set
A = set(["Thriller", "Back in Black", "AC/DC"]
A

# Add element to set
A.add("NSYNC")
A

# Try to add duplicate element to the set
A.add("NSYNC")
A

# Remove the element from set
A.remove("NSYNC")
A

# Verify if the element is in the set
"AC/DC" in A

# Sample Sets
album_set1 = set(["Thriller", 'AC/DC', 'Back in Black'])
album_set2 = set([ "AC/DC", "Back in Black", "The Dark Side of the Moon"])

# Print two sets
album_set1, album_set2

# Find the intersections
intersection = album_set1 & album_set2
intersection

# Find the difference in set1 but not set2
album_set1.difference(album_set2)

 album_set2.difference(album_set1)
 
 Use intersection method to find the intersection of album_list1 and␣
,→album_list2
album_set1.intersection(album_set2)

# Find the union of two sets
album_set1.union(album_set2)

# Check if superset
set(album_set1).issuperset(album_set2)

# Check if subset
set(album_set2).issubset(album_set1)

# Check if subset
set({"Back in Black", "AC/DC"}).issubset(album_set1)

: # Check if superset
album_set1.issuperset({"Back in Black", "AC/DC"})

# Convert the list [‘rap’,‘house’,‘electronic music’, ‘rap’] to a set:
# Write your code below and press Shift+Enter to executese
set1= set(['rap','house','electronic music', 'rap'])
set1

# Consider the list A = [1, 2, 2, 1] and set B = set([1, 2, 2, 1]), does sum(A) = sum(B)
# Write your code below and press Shift+Enter to execute
A = [1, 2, 2, 1]
B = set([1, 2, 2, 1])
print('sum of A is',sum(A))
print('sum od b is',sum(B))

# Create a new set album_set3 that is the union of album_set1 and album_set2:
# Write your code below and press Shift+Enter to execute
album_set1 = set(["Thriller", 'AC/DC', 'Back in Black'])
album_set2 = set([ "AC/DC", "Back in Black", "The Dark Side of the Moon"])
album_set3 = album_set1.union(album_set2)

#Find out if album_set1 is a subset of album_set3
# Write your code below and press Shift+Enter to execut
album_set1.issubset(album_set3)




